; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	c:\hub\cryptarm\xoodoo\xoodoo.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_xoodoo
; Function compile flags: /Ogspy
; File c:\hub\cryptarm\xoodoo\xoodoo.c
;	COMDAT _xoodoo
_TEXT	SEGMENT
_rc$ = -68						; size = 48
_e$ = -20						; size = 16
_r$ = -4						; size = 4
tv791 = 8						; size = 4
_state$ = 8						; size = 4
_xoodoo	PROC						; COMDAT

; 32   : void xoodoo(void *state) {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H

; 33   :     uint32_t e[4], x0, x1, x2, x3, t;
; 34   :     int      r, i;
; 35   :     uint32_t *x=(uint32_t*)state;
; 36   : 
; 37   :     uint32_t rc[12]=
; 38   :     { 0x058, 0x038, 0x3c0, 0x0d0,
; 39   :       0x120, 0x014, 0x060, 0x02c,
; 40   :       0x380, 0x0f0, 0x1a0, 0x012 };
; 41   : 
; 42   :     // 12 rounds by default
; 43   :     for (r=0; r<12; r++) {

	and	DWORD PTR _r$[ebp], 0
	mov	eax, DWORD PTR _state$[ebp]
	push	ebx
	push	esi
	mov	DWORD PTR _rc$[ebp], 88			; 00000058H
	mov	DWORD PTR _rc$[ebp+4], 56		; 00000038H
	mov	DWORD PTR _rc$[ebp+8], 960		; 000003c0H
	mov	DWORD PTR _rc$[ebp+12], 208		; 000000d0H
	mov	DWORD PTR _rc$[ebp+16], 288		; 00000120H
	mov	DWORD PTR _rc$[ebp+20], 20		; 00000014H
	mov	DWORD PTR _rc$[ebp+24], 96		; 00000060H
	mov	DWORD PTR _rc$[ebp+28], 44		; 0000002cH
	mov	DWORD PTR _rc$[ebp+32], 896		; 00000380H
	mov	DWORD PTR _rc$[ebp+36], 240		; 000000f0H
	mov	DWORD PTR _rc$[ebp+40], 416		; 000001a0H
	mov	DWORD PTR _rc$[ebp+44], 18		; 00000012H
	push	edi
$LL23@xoodoo:

; 44   :       // Theta
; 45   :       for (i=0; i<4; i++) {

	xor	esi, esi
	lea	edx, DWORD PTR [eax+16]
$LL9@xoodoo:

; 46   :         e[i] = ROTR32(x[i] ^ x[i+4] ^ x[i+8], 18);

	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, DWORD PTR [edx+16]
	xor	ecx, DWORD PTR [edx]
	add	edx, 4
	rol	ecx, 14					; 0000000eH

; 47   :         e[i]^= ROTR32(e[i], 9);

	mov	edi, ecx
	ror	edi, 9
	xor	edi, ecx
	mov	DWORD PTR _e$[ebp+esi*4], edi
	inc	esi
	cmp	esi, 4
	jl	SHORT $LL9@xoodoo

; 48   :       }
; 49   : 
; 50   :       for (i=0; i<12; i++) {

	xor	ecx, ecx
$LL6@xoodoo:

; 51   :         x[i]^= e[(i - 1) & 3];      

	lea	edx, DWORD PTR [ecx-1]
	and	edx, 3
	mov	edx, DWORD PTR _e$[ebp+edx*4]
	xor	DWORD PTR [eax+ecx*4], edx
	inc	ecx
	cmp	ecx, 12					; 0000000cH
	jl	SHORT $LL6@xoodoo

; 52   :       }
; 53   : 
; 54   :       // Rho west
; 55   :       XCHG(x[7], x[4]);

	mov	edx, DWORD PTR [eax+28]
	lea	ecx, DWORD PTR [eax+16]
	mov	esi, DWORD PTR [ecx]
	mov	DWORD PTR [ecx], edx

; 56   :       XCHG(x[7], x[5]);

	mov	edx, esi
	mov	esi, DWORD PTR [eax+20]
	mov	DWORD PTR [eax+20], edx

; 57   :       XCHG(x[7], x[6]);

	mov	edx, esi
	mov	esi, DWORD PTR [eax+24]
	mov	DWORD PTR [eax+24], edx

; 58   : 
; 59   :       // Iota
; 60   :       x[0] ^= rc[r];

	mov	edx, DWORD PTR _r$[ebp]
	mov	edx, DWORD PTR _rc$[ebp+edx*4]
	xor	DWORD PTR [eax], edx
	mov	DWORD PTR [eax+28], esi
	mov	DWORD PTR tv791[ebp], 4
$LL3@xoodoo:

; 61   : 
; 62   :       // Chi and Rho east
; 63   :       for (i=0; i<4; i++) {
; 64   :         x0 = x[i+0];

	mov	edi, DWORD PTR [ecx-16]

; 65   :         x1 = x[i+4];

	mov	edx, DWORD PTR [ecx]

; 66   :         x2 = ROTR32(x[i+8], 21);

	mov	esi, DWORD PTR [ecx+16]
	rol	esi, 11					; 0000000bH

; 67   : 
; 68   :         x[i+8] = ROTR32((~x0 & x1) ^ x2, 24);

	mov	ebx, edi
	not	ebx
	and	ebx, edx
	xor	ebx, esi
	rol	ebx, 8
	mov	DWORD PTR [ecx+16], ebx

; 69   :         x[i+4] = ROTR32((~x2 & x0) ^ x1, 31);

	mov	ebx, esi
	not	ebx
	and	ebx, edi
	xor	ebx, edx

; 70   :         x[i+0]^= ~x1 & x2;

	not	edx
	and	edx, esi
	xor	edx, edi
	rol	ebx, 1
	mov	DWORD PTR [ecx], ebx
	mov	DWORD PTR [ecx-16], edx
	add	ecx, 4
	dec	DWORD PTR tv791[ebp]
	jne	SHORT $LL3@xoodoo

; 71   :       }
; 72   :       XCHG(x[8], x[10]);

	mov	ecx, DWORD PTR [eax+32]
	mov	edx, DWORD PTR [eax+40]
	inc	DWORD PTR _r$[ebp]
	cmp	DWORD PTR _r$[ebp], 12			; 0000000cH
	mov	DWORD PTR [eax+32], edx

; 73   :       XCHG(x[9], x[11]);

	mov	edx, DWORD PTR [eax+44]
	mov	DWORD PTR [eax+40], ecx
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR [eax+36], edx
	mov	DWORD PTR [eax+44], ecx
	jl	$LL23@xoodoo
	pop	edi
	pop	esi
	pop	ebx

; 74   :     }
; 75   : }

	leave
	ret	0
_xoodoo	ENDP
_TEXT	ENDS
END
