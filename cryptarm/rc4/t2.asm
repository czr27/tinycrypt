; Listing generated by Microsoft (R) Optimizing Compiler Version 19.13.26128.0 

	TITLE	c:\hub\cryptarm\rc4\t2.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_rc4
; Function compile flags: /Ogspy
; File c:\hub\cryptarm\rc4\t2.c
;	COMDAT _rc4
_TEXT	SEGMENT
_l$ = 8							; size = 4
_in$ = 12						; size = 4
_y$1$ = 16						; size = 1
_c$ = 16						; size = 4
_rc4	PROC						; COMDAT

; 35   : void rc4(W l,B *in,ctx*c){

	push	ebx

; 36   :   B j,t,x,y,*s=c->s;
; 37   :   W i;
; 38   :   
; 39   :   if(!l){

	mov	ebx, DWORD PTR _l$[esp]
	push	ebp
	push	esi
	push	edi
	mov	edi, DWORD PTR _c$[esp+12]
	test	ebx, ebx
	jne	SHORT $LN11@rc4

; 40   :     F(256)s[i]=i;

	mov	eax, ebx
$LL4@rc4:
	mov	BYTE PTR [eax+edi+2], al
	inc	eax
	cmp	eax, 256				; 00000100H
	jb	SHORT $LL4@rc4

; 41   :     j=c->x=c->y=0;
; 42   :     F(256)

	mov	ebp, DWORD PTR _in$[esp+12]
	mov	esi, ebx
	mov	WORD PTR [edi], bx
$LL7@rc4:

; 43   :       j+=s[i]+in[i%16],
; 44   :       t=s[i],s[i]=s[j],s[j]=t;

	mov	dl, BYTE PTR [esi+edi+2]
	mov	eax, esi
	and	eax, 15					; 0000000fH
	mov	al, BYTE PTR [eax+ebp]
	add	al, dl
	add	bl, al
	movzx	ecx, bl
	mov	al, BYTE PTR [ecx+edi+2]
	mov	BYTE PTR [esi+edi+2], al
	inc	esi
	mov	BYTE PTR [ecx+edi+2], dl
	cmp	esi, 256				; 00000100H
	jb	SHORT $LL7@rc4

; 45   :   }else{

	jmp	SHORT $LN12@rc4
$LN11@rc4:

; 46   :     x=c->x;y=c->y;

	mov	dh, BYTE PTR [edi]

; 47   :     F(l)

	xor	ebp, ebp
	mov	al, BYTE PTR [edi+1]
	test	ebx, ebx
	je	SHORT $LN9@rc4
$LL10@rc4:

; 48   :       x++,y+=s[x],
; 49   :       t=s[x],s[x]=s[y],s[y]=t,
; 50   :       j=s[x]+s[y],

	inc	dh
	movzx	esi, dh
	mov	dl, BYTE PTR [esi+edi+2]
	add	al, dl
	movzx	ecx, al
	mov	BYTE PTR _y$1$[esp+12], al
	mov	al, BYTE PTR [ecx+edi+2]
	mov	BYTE PTR [esi+edi+2], al
	mov	BYTE PTR [ecx+edi+2], dl
	mov	al, BYTE PTR [esi+edi+2]
	mov	ecx, DWORD PTR _in$[esp+12]
	add	al, dl
	movzx	eax, al
	mov	al, BYTE PTR [eax+edi+2]
	xor	BYTE PTR [ecx+ebp], al
	inc	ebp
	mov	al, BYTE PTR _y$1$[esp+12]
	cmp	ebp, ebx
	jb	SHORT $LL10@rc4
$LN9@rc4:

; 51   :       in[i]^=s[j];
; 52   :     c->x=x;c->y=y;

	mov	BYTE PTR [edi], dh
	mov	BYTE PTR [edi+1], al
$LN12@rc4:

; 53   :   }
; 54   : }

	pop	edi
	pop	esi
	pop	ebp
	pop	ebx
	ret	0
_rc4	ENDP
_TEXT	ENDS
END
