; Listing generated by Microsoft (R) Optimizing Compiler Version 19.13.26128.0 

	TITLE	c:\hub\cryptarm\noekeon\t2.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_Noekeon
; Function compile flags: /Ogspy
; File c:\hub\cryptarm\noekeon\t2.c
;	COMDAT _Noekeon
_TEXT	SEGMENT
tv446 = -16						; size = 4
_c$1$ = -16						; size = 4
tv437 = -12						; size = 4
tv436 = -8						; size = 4
tv435 = -4						; size = 4
tv440 = 8						; size = 4
_mk$ = 8						; size = 4
_p$ = 12						; size = 4
_Noekeon PROC						; COMDAT

; 32   : void Noekeon(void*mk,void*p) {

	sub	esp, 16					; 00000010H
	push	ebx
	push	ebp
	push	esi

; 33   :     unsigned int a,b,c,d,t,*k=mk,*x=p;
; 34   :     unsigned char rc=0x80;
; 35   : 
; 36   :     a=x[0];b=x[1];c=x[2];d=x[3];
; 37   :   
; 38   :     for(;;){
; 39   :       a^=rc;t=a^c;t^=R(t,8)^R(t,24);
; 40   :       b^=t;d^=t;a^=k[0];b^=k[1];

	mov	esi, DWORD PTR _mk$[esp+24]
	push	edi
	mov	edi, DWORD PTR _p$[esp+28]
	mov	eax, DWORD PTR [edi+8]
	mov	ecx, eax
	xor	ecx, DWORD PTR [edi]
	mov	ebx, DWORD PTR [edi+4]
	xor	ecx, 128				; 00000080H

; 41   :       c^=k[2];d^=k[3];t=b^d;

	mov	ebp, DWORD PTR [edi+12]
	mov	edx, ecx
	mov	DWORD PTR _c$1$[esp+32], eax
	mov	eax, ecx
	rol	eax, 8
	ror	edx, 8
	xor	edx, eax
	mov	eax, DWORD PTR [esi+4]
	xor	edx, ecx
	mov	DWORD PTR tv440[esp+28], eax
	xor	ebx, eax
	mov	eax, DWORD PTR [esi+12]
	xor	ebp, eax
	mov	DWORD PTR tv437[esp+32], eax
	xor	ebp, edx
	xor	ebx, edx
	mov	edx, ebp
	xor	edx, ebx

; 42   :       t^=R(t,8)^R(t,24);a^=t;c^=t;

	mov	ecx, edx
	mov	eax, edx
	rol	eax, 8
	ror	ecx, 8
	xor	ecx, eax
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR tv436[esp+32], eax
	xor	edx, ecx
	mov	eax, DWORD PTR [esi+8]
	mov	esi, DWORD PTR [esi]
	xor	esi, DWORD PTR [edi]
	mov	DWORD PTR tv435[esp+32], eax
	xor	esi, edx
	xor	eax, edx
	mov	edx, 128				; 00000080H
	xor	DWORD PTR _c$1$[esp+32], eax
	xor	esi, edx
	mov	edi, DWORD PTR _c$1$[esp+32]
$LL2@Noekeon:

; 43   :       if(rc==0xd4)break;
; 44   :       rc=((rc<<1)^(((rc>>7)&1)*0x1b));

	mov	al, dl

; 45   :       b=R(b,31);c=R(c,27);d=R(d,30);

	rol	ebp, 2
	shr	al, 7
	add	dl, dl
	movzx	eax, al

; 46   :       b^=~((d)|(c));t=d;d=a^c&b;a=t;

	mov	ecx, ebp
	imul	eax, eax, 27
	rol	edi, 5
	rol	ebx, 1
	xor	dl, al
	mov	eax, ebp
	or	eax, edi
	mov	DWORD PTR tv446[esp+32], edx
	not	eax
	mov	ebp, edi
	xor	ebx, eax

; 47   :       c^=a^b^d;b^=~((d)|(c));a^=c&b;

	mov	eax, ecx
	and	ebp, ebx
	xor	ebp, esi
	xor	eax, ebp
	xor	edi, eax
	mov	eax, ebp
	xor	edi, ebx

; 48   :       b=R(b,1);c=R(c,5);d=R(d,2);

	ror	ebp, 2
	xor	ebp, DWORD PTR tv437[esp+32]
	or	eax, edi
	not	eax
	mov	esi, edi
	xor	ebx, eax
	ror	edi, 5
	and	esi, ebx
	movzx	eax, dl
	xor	esi, ecx
	ror	ebx, 1
	xor	ebx, DWORD PTR tv440[esp+28]
	xor	esi, eax
	mov	edx, edi
	xor	edx, esi
	mov	ecx, edx
	mov	eax, edx
	rol	eax, 8
	ror	ecx, 8
	xor	ecx, eax
	xor	edx, ecx
	xor	ebp, edx
	xor	ebx, edx
	mov	edx, ebp
	xor	edx, ebx
	mov	ecx, edx
	mov	eax, edx
	rol	eax, 8
	ror	ecx, 8
	xor	ecx, eax
	mov	eax, DWORD PTR tv436[esp+32]
	xor	edx, ecx
	xor	eax, edx
	xor	esi, eax
	mov	eax, DWORD PTR tv435[esp+32]
	xor	eax, edx
	mov	edx, DWORD PTR tv446[esp+32]
	xor	edi, eax
	cmp	dl, 212					; 000000d4H
	jne	$LL2@Noekeon

; 49   :     }
; 50   :     x[0]=a;x[1]=b;x[2]=c;x[3]=d;

	mov	DWORD PTR _c$1$[esp+32], edi
	mov	edi, DWORD PTR _p$[esp+28]
	mov	ecx, DWORD PTR _c$1$[esp+32]
	mov	DWORD PTR [edi], esi
	mov	DWORD PTR [edi+4], ebx
	mov	DWORD PTR [edi+12], ebp
	mov	DWORD PTR [edi+8], ecx
	pop	edi
	pop	esi
	pop	ebp
	pop	ebx

; 51   : }

	add	esp, 16					; 00000010H
	ret	0
_Noekeon ENDP
_TEXT	ENDS
END
