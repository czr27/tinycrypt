package lightmac

import (
    "bytes"
    "testing"
)

type TagTest struct {
    ctrLength int
    tagLength int
    k1        []byte
    k2        []byte
    message   []byte
    tag       []byte
}

var tagTests = []TagTest {
    {
        4,
        16,
        []byte{0x63, 0xcd, 0xae, 0x6e, 0xbf, 0x34, 0xdb, 0xd5, 0x54, 0x1b, 0xd9, 0xf6, 0x93, 0x0c, 0xdc, 0x09},
        []byte{0xde, 0x9b, 0x7a, 0x5a, 0xa6, 0xa0, 0x5a, 0xe7, 0xec, 0x93, 0xe0, 0x3f, 0x30, 0x1d, 0x77, 0xef},
        []byte{0x55, 0x7f, 0xbd, 0x6b, 0x41, 0x52, 0xce, 0xf6, 0x92, 0x41, 0x04, 0xec, 0xf5, 0xd5, 0x28, 0xaf, 0x8f, 0xb0, 0xaa, 0x10, 0x43, 0xa6, 0xa8, 0xd9, 0xc3, 0x57, 0xb5, 0x0e, 0xe0, 0x04, 0x83, 0xab, 0xe2, 0xe0, 0x50, 0xec, 0x80, 0x36, 0x86, 0x0f, 0xa2, 0x24, 0x59, 0x38, 0x54, 0x29, 0xa7, 0x52, 0x6d, 0x10, 0x04, 0xc4, 0x87, 0x9e, 0x64, 0xa5, 0x80, 0x50, 0x06, 0xb2, 0xe4, 0x47, 0x37, 0xf2},
        []byte{0xc7, 0x17, 0xaa, 0x88, 0xf4, 0x87, 0x97, 0xa2, 0x1f, 0xc5, 0xf2, 0xff, 0x33, 0x93, 0x50, 0xc6},
    },
    {
        4,
        16,
        []byte{0x63, 0xcd, 0xae, 0x6e, 0xbf, 0x34, 0xdb, 0xd5, 0x54, 0x1b, 0xd9, 0xf6, 0x93, 0x0c, 0xdc, 0x09},
        []byte{0xde, 0x9b, 0x7a, 0x5a, 0xa6, 0xa0, 0x5a, 0xe7, 0xec, 0x93, 0xe0, 0x3f, 0x30, 0x1d, 0x77, 0xef},
        []byte{0x55, 0x7f, 0xbd, 0x6b, 0x41, 0x52, 0xce, 0xf6, 0x92, 0x41, 0x04, 0xec, 0xf5, 0xd5, 0x28, 0xaf, 0x8f, 0xb0, 0xaa, 0x10, 0x43, 0xa6, 0xa8, 0xd9, 0xc3, 0x57, 0xb5, 0x0e, 0xe0, 0x04, 0x83, 0xab, 0xe2, 0xe0, 0x50, 0xec, 0x80, 0x36, 0x86, 0x0f, 0xa2, 0x24, 0x59, 0x38, 0x54, 0x29, 0xa7, 0x52, 0x6d, 0x10, 0x04, 0xc4, 0x87, 0x9e, 0x64, 0xa5, 0x80, 0x50, 0x06, 0xb2},
        []byte{0xa5, 0x5b, 0x49, 0x3a, 0xf6, 0x22, 0x6e, 0x2e, 0x15, 0x3d, 0x8f, 0xd4, 0x3c, 0x13, 0x51, 0xf0},
    },
}

func TestTag(t *testing.T) {
    for i, tt := range tagTests {
        t.Logf("Calculating tag for testvector %d...", i + 1)

        lm, err := NewAESWithTwoKeys(tt.ctrLength, tt.tagLength, tt.k1, tt.k2)
        if err != nil {
            t.Fatal(err.Error())
        }

        tag, err := lm.Tag(tt.message)
        if err != nil {
            t.Fatal(err.Error())
        }

        if !bytes.Equal(tag, tt.tag) {
            t.Fail()
        }
    }
}

func BenchmarkTag(b *testing.B) {
    bb := tagTests[0]

    lm, err := NewAESWithTwoKeys(bb.ctrLength, bb.tagLength, bb.k1, bb.k2)
    if err != nil {
        b.Fatal(err.Error())
    }
    b.ResetTimer()

    for i := 0; i < b.N; i++ {
        _, err := lm.Tag(bb.message)
        if err != nil {
            b.Fatal(err.Error())
        }
    }
}
